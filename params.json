{
  "name": "Maven-auto-upgrade-script",
  "tagline": "Maven auto upgrade script to auto-generate GitHub pull requests with version upgrades.",
  "body": "# maven-auto-upgrade-script\r\n\r\n[![License](https://img.shields.io/github/license/Yomoni/maven-auto-upgrade-script.svg)](https://github.com/Yomoni/maven-auto-upgrade-script/blob/master/LICENSE)\r\n\r\nMaven auto upgrade script check for any existing maven dependency and/or plugin upgrade. For each upgrade, a new branch is created with a single upgrade and a pull request is submitted from this branch.\r\n\r\n***\r\n\r\n## Installation\r\n\r\nClone the git repository with this command:\r\n```bash\r\ngit clone https://github.com/Yomoni/maven-auto-upgrade-script.git\r\n```\r\n\r\n## Requirements\r\n\r\n* _git_ must be installed, version 2.3 or above is recommended\r\n* Maven must be installed and the _mvn_ command must works (in the PATH environment variable with the associated JAVA_HOME/JDK)\r\n* [_hub_](https://hub.github.com/) must be installed and configured to generate pull-request directly in GitHub\r\n\r\n## Launch\r\n\r\n### Single repository check\r\n\r\nCheck of dependencies upgrades on a remote git repository (with a temporary clone) or a local existing one can be done with this command:\r\n```bash\r\nmaven-auto-upgrade.sh <git repository URL|git repository local directory> [<target branch>]\r\n```\r\nIf no target branch is specified, the default branch _master_ is used. If the repository already exists, no ```bash git pull``` command is used to synchronize the repository.\r\n\r\nExecution example command:\r\n```bash\r\nmaven-auto-upgrade.sh https://github.com/Sylvain-Bugat/RundeckMonitor.git\r\n```\r\noutput of this example:\r\n```bash\r\nVerifying Git version:...[OK] -> git version 2.7.0\r\nVerifying GitHub Hub version:...[OK] found hub command -> hub version 2.2.2\r\nVerifying Maven version:...[OK] -> Apache Maven 3.3.3\r\nCloning Sylvain-Bugat/RundeckMonitor repository:...[OK]\r\nChecking property version upgrades:...[OK] -> 1 upgrade(s) found\r\n\r\nUpgrading slf4j.version property from 1.7.18 to 1.7.19\r\nCheckout of main branch master:...[OK]\r\nChecking existence of the remote slf4j.version_upgrade_1.7.18_to_1.7.19:...[OK]\r\nModifying property assertj.version:...[OK]\r\nCreate and checkout branch slf4j.version_upgrade_1.7.18_to_1.7.19:...[OK]\r\nAdding modified pom.xml to commit files:...[OK]\r\nCommiting modified pom.xml files:...[OK]\r\nPushing the commit to the git repository:...[OK]\r\nCreating the associated GitHub pull-request:...[OK] -> https://github.com/Sylvain-Bugat/RundeckMonitor/pull/33\r\nDeleting clone /cygdrive/c/maven-auto-upgrade-script/RundeckMonitor:...[OK]\r\n\r\n```\r\n\r\nCreated pull request on this example: https://github.com/Sylvain-Bugat/RundeckMonitor/pull/33\r\n\r\n### Multiple repository check\r\n\r\nThe check of multiple existing/remote git repositories can be done with this command:\r\n```bash\r\nmaven-multi-repository-auto-upgrade.sh <git repository URL|git directory> [<git repository URL|git directory>] [...]\r\n```\r\n\r\nIn multiple repositories check, the default branche _master_ is used\r\n\r\nExecution example command:\r\n```bash\r\nmaven-multi-repository-auto-upgrade.sh https://github.com/Sylvain-Bugat/RundeckMonitor.git https://github.com/Sylvain-Bugat/aws-ec2-start-stop-tools.git\r\n```\r\n\r\nCommand output exemple:\r\n```bash\r\nVerifying Git version:...[OK] -> git version 2.7.0\r\nVerifying GitHub Hub version:...[OK] found hub command -> hub version 2.2.2\r\nVerifying Maven version:...[OK] -> Apache Maven 3.3.3\r\n\r\nCheck Maven dependencies upgrades of https://github.com/Sylvain-Bugat/RundeckMonitor.git repository\r\nCloning Sylvain-Bugat/RundeckMonitor repository:...[OK]\r\nChecking property version upgrades:...[OK] -> 0 upgrade(s) found\r\nDeleting clone /cygdrive/c/maven-auto-upgrade-script/RundeckMonitor directory:...[OK]\r\n\r\nCheck Maven dependencies upgrades of https://github.com/Sylvain-Bugat/aws-ec2-start-stop-tools.git repository\r\nCloning Sylvain-Bugat/aws-ec2-start-stop-tools repository:...[OK]\r\nChecking property version upgrades:...[OK] -> 1 upgrade(s) found\r\n\r\nUpgrading assertj.version property from 2.3.0 to 2.4.0\r\nCheckout of main branch master:...[OK]\r\nChecking existence of the remote branch assertj.version_upgrade_2.3.0_to_2.4.0:...[OK]\r\nModifying property assertj.version:...[OK]\r\nCreate and checkout branch 2.3.0_to_2.4.0:...[OK]\r\nAdding modified pom.xml to commit files:...[OK]\r\nCommiting modified pom.xml files:...[OK]\r\nPushing the commit to the git repository:...[OK]\r\nCreating the associated GitHub pull-request:...[OK] -> https://github.com/Sylvain-Bugat/aws-ec2-start-stop-tools/pull/52\r\nDeleting clone /cygdrive/c/maven-auto-upgrade-script/aws-ec2-start-stop-tools directory:...[OK]\r\n```\r\n\r\n## Troubleshooting\r\n\r\n### _git_ cannot commit to the cloned repository\r\n\r\nThis error occurs if no credentials/user settings are permanently used. Try to execute a ```git push``` command before executing the script to temporary remember GitHub access or [setup a git password cache](https://help.github.com/articles/caching-your-github-password-in-git/) or use SSH repository URL with a default accepted SSH key. \r\n\r\n### _git_ cannot clone private repository\r\n\r\nError output example:\r\n```bash\r\nVerifying Git version:...[OK] -> git version 2.7.0\r\nVerifying GitHub Hub version:...[OK] found hub command -> hub version 2.2.2\r\nVerifying Maven version:...[OK] -> Apache Maven 3.3.3\r\nCloning Sylvain-Bugat/private-repo repository:...[FAILED]\r\nCloning into 'private-repo'...\r\nfatal: could not read Username for 'https://github.com': terminal prompts disabled\r\n```\r\nSame possible solutions as the previous question.\r\n\r\n### _hub_ cannot create the pull request on GitHub\r\n\r\nTry to execute a hub command like this in a already cloned git repository:\r\n```\r\nhub ci-status\r\n```\r\nIf it's the first hub execution, user name/password are required to create to register a [personal access token](https://github.com/settings/tokens) on your GitHub account.\r\n\r\n### Upgrade I refuse/don't want are spammed\r\n\r\nAt each execution a pull request is created if a new version is found and if an existing branch with the same version upgrade is not already found.\r\n\r\nIf you don't want an upgrade or you don't want to apply it right now you can keep the associated branch alive as long as you want. But for some strange/incompatible version the dependency version must be completely ignored.\r\n\r\n### Not release version upgrade are generated\r\n\r\nThere are some case were pre-release versions are detected even if only release repositories are used:\r\n* Alpha/beta versions (A)\r\n* Release canditate versions (RC)\r\n* Draft versions\r\n* Milestone versions (M)\r\nBecause these versions are published on release repositories for public tests.\r\n \r\nTo ignore some dependencies/plugins versions, the Maven versions plugin configuration can be modified. Example of Such configuration  on [Rundeck Monitor](https://github.com/Sylvain-Bugat/RundeckMonitor/blob/master/dependencies-check-rules.xml).\r\n\r\n### Some upgrade are not detected\r\n\r\nThis is a limitation of these scripts, they uses ```mvn versions:display-plugin-updates  versions:display-property-updates``` to find dependency/plugin version upgrades. Dependencies with direct version configuration like this cannot be detected and upgraded:\r\n```xml\r\n<dependency>\r\n\t<groupId>org.slf4j</groupId>\r\n\t<artifactId>slf4j-ext</artifactId>\r\n\t<version>1.7.19</version>\r\n</dependency>\r\n```\r\n\r\nTo fix that, the version must be in a property value like this:\r\n```xml\r\n<properties>\r\n\t<org.slf4j.version>1.7.19</org.slf4j.version>\r\n</properties>\r\n...\r\n<dependency>\r\n\t<groupId>org.slf4j</groupId>\r\n\t<artifactId>slf4j-ext</artifactId>\r\n\t<version>${org.slf4j.version}</version>\r\n</dependency>\r\n```\r\n\r\n### My git repository is not on GitHub\r\n\r\nThese scripts can be used without the [_hub_](https://hub.github.com/) command, in this case, branch with new dependency/plugin version are commited but no pull-request can be created on GitHub.\r\n\r\n### Another issue/bug, feature requests or questions?\r\n\r\nIssues, bugs, and feature requests should be submitted on [GitHub maven-auto-upgrade-script issue tracking](https://github.com/Yomoni/maven-auto-upgrade-script/issues).\r\n\r\n## Thanks to\r\n\r\n* [Maven](https://maven.apache.org/) :construction_worker:\r\n* [Versions Maven plugin](http://www.mojohaus.org/versions-maven-plugin/) :arrow_double_up:\r\n* [_git_](https://git-scm.com/) and [_hub_](https://hub.github.com/) :smirk:\r\n* [GitHub](https://github.com/) :laughing:\r\n* [Yomoni](https://www.yomoni.fr/?parrain=SYLVAIN01) :moneybag:",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}